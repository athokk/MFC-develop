compilers:
  - name:        GNU Fortran
    is_used_cmd: exit $(expr $(${FC} --version | grep -i 'GNU Fortran' | wc -l) \= 0)
    get_version: ${FC} --version | grep 'GNU Fortran' | tr ' ' '\n' | tail -n 1
    min_version: 5.0.0
    supported:   true
  - name:        NVHPC (NVFortran)
    is_used_cmd: exit $(expr $(${FC} --version | grep -i 'nvfortran' | wc -l) \= 0)
    get_version: ${FC} --version | grep 'nvfortran' | tr ' ' '\n' | head -n 2 | tail -n 1
    min_version: 21.7.0
    supported:   true
  - name:        LLVM Clang (C)
    is_used_cmd: exit $(expr $(${CC} --showme | grep -i 'clang' | wc -l) \= 0)
    supported:   false  
  - name:        LLVM Clang (C++)
    is_used_cmd: exit $(expr $(${CXX} --showme | grep -i 'clang' | wc -l) \= 0)
    supported:   false
  - name:        LLVM Clang (Fortran)
    is_used_cmd: exit $(expr $(${FC} --showme | grep -i 'clang' | wc -l) \= 0)
    supported:   false

targets:
  - name: fftw3
    common_mode: release-cpu
    fetch:
      method: download
      params:
        version: 3.3.10
        link: http://www.fftw.org/fftw-${VERSION}.tar.gz
    build:
      - >-
        ./configure ${CONFIGURE_OPTIONS} ${COMPILERS} --enable-threads
        --enable-mpi --enable-static --disable-shared
      - make ${MAKE_OPTIONS} ${COMPILER_FLAGS} ${COMPILERS}
      - make install
    clean:
      - make clean

  - name: hdf5
    common_mode: release-cpu
    fetch:
      method: clone
      params:
        git: https://github.com/HDFGroup/hdf5
        hash: 4aa40365623cf35643b262781f92578220c42bbb
    build:
      - >-
        ./configure ${CONFIGURE_OPTIONS} ${COMPILERS} --enable-parallel
        --enable-deprecated-symbols --disable-sharedlib-rpath CFLAGS="-O2"
        CPPFLAGS="-O2" FFLAGS="-O2" --enable-static --disable-shared
      - >-
        make ${MAKE_OPTIONS} ${COMPILER_FLAGS} ${COMPILERS} CFLAGS="-O2"
        CPPFLAGS="-O2" FFLAGS="-O2"
      - make install prefix="${INSTALL_PATH}"
    clean:
      - make clean

  - name: silo
    common_mode: release-cpu
    depends:
      - HDF5
    fetch:
      method: clone
      params:
        git:  https://github.com/LLNL/Silo
        hash: 9e3a31fbf661c4d26e9f5272287e5ff41971d117
    build:
      - >-
        ./configure ${CONFIGURE_OPTIONS} --enable-pythonmodule
        --enable-optimization --disable-hzip --disable-fpzip --disable-silex
        --with-hdf5="${HDF5:INSTALL_PATH}/include","${HDF5:INSTALL_PATH}/lib"
        ${COMPILERS} ${COMPILER_FLAGS} CFLAGS="-O2" CPPFLAGS="-O2" FFLAGS="-O2"
        --enable-static --disable-shared LIBS="-ldl"
      - make ${MAKE_OPTIONS}
      - make install prefix="${INSTALL_PATH}"
    clean:
      - make clean

  - name: zfp
    common_mode: release-cpu
    fetch:
      method: clone
      params:
        git:  https://github.com/LLNL/zfp
        hash: e8edaced12f139ddf16167987ded15e5da1b98da
    build:
      - mkdir -p build
      - >-
        cd build && cmake -DZFP_WITH_OPENMP=OFF BUILD_UTILITIES=OFF
        BUILD_ZFORP=ON -DZFP_WITH_CUDA=ON
        -DCMAKE_C_COMPILER=nvc -DCMAKE_CXX_COMPILER=nvc++
        -DCUDA_TOOLKIT_ROOT_DIR="${CUDA:INSTALL_PATH}" ..
      - cd build && cmake --build . --config Release
      - rsync -avh --progress "$(pwd)/build/bin/" "${INSTALL_PATH}/bin"
      - rsync -avh --progress "$(pwd)/build/"lib*/ "${INSTALL_PATH}/lib"
    clean:
      - cd build && ${COMPILERS} && make clean
  
  - name: pre_process
    depends: []
    fetch:
      method: source
      params:
        source: ${MFC_ROOT_PATH}/src/pre_process_code
        check:  ${simulation:INSTALL_PATH}/bin/pre_process
    clean:
      - make INSTALL_PATH="${pre_process:INSTALL_PATH}" clean
    build:
      - >-
        make INSTALL_PATH="${pre_process:INSTALL_PATH}"
        ${MAKE_OPTIONS} ${COMPILER_FLAGS} ${COMPILERS}
    clean:
      - make clean

  - name: simulation
    depends:
      - FFTW3
#      - ZFP
    fetch:
      method: source
      params:
        source: ${MFC_ROOT_PATH}/src/simulation_code
        check:  ${simulation:INSTALL_PATH}/bin/simulation
    clean:
      - make INSTALL_PATH="${simulation:INSTALL_PATH}" clean
    build:
      - >-
        make INSTALL_PATH="${simulation:INSTALL_PATH}"
        ${MAKE_OPTIONS} ${COMPILER_FLAGS} ${COMPILERS}
        FFLAGS="-I${FFTW3:INSTALL_PATH}/include"
        LNKFLAGS="-L${FFTW3:INSTALL_PATH}/lib -lfftw3 -lm"
    clean:
      - make clean

  - name: post_process
    depends:
      - FFTW3
      - HDF5
      - SILO
    fetch:
      method: source
      params:
        source: ${MFC_ROOT_PATH}/src/post_process_code
        check:  ${simulation:INSTALL_PATH}/bin/post_process
    clean:
      - make INSTALL_PATH="${post_process:INSTALL_PATH}" clean
    build:
      - >-
        make INSTALL_PATH="${post_process:INSTALL_PATH}"
        ${MAKE_OPTIONS} ${COMPILER_FLAGS} ${COMPILERS}
        FFLAGS="-O0 -I${FFTW3:INSTALL_PATH}/include"
        LNKFLAGS="-L${FFTW3:INSTALL_PATH}/lib -lsiloh5 -lhdf5 -lfftw3 -lm -lz -ldl"
    clean:
      - make clean
 
  - name: mfc
    depends:
      - pre_process
      - simulation
      - post_process
    fetch:
      method: collection
      params: null
    collection: null
    build: []
    clean: []
